#include <iostream>
#include <vector>
#include <algorithm>
#include <limits.h>
#include <queue>
using namespace std;
#define maxn 100005
using ll = long long;
ll N,M;
vector<pair<ll,ll> > adj[maxn];
vector<bool> vis(maxn,false);
vector<ll> dist(maxn,__LONG_LONG_MAX__);
void djikstra(long long node){
    dist[node] = 0;
    priority_queue<pair<ll,ll> > q;
    q.push(make_pair(0,node));
    while(!q.empty()){
        node = q.top().second; q.pop();
        if(vis[node]){continue;} vis[node] = true;
        for(auto u : adj[node]){
            if(!vis[u.first]){
                ll b = u.first; ll w = u.second;
                dist[b] = min(dist[b],dist[node]+w);
                //priority queue is max so we have to negative i am too lazy to change to min with stl things
                q.push(make_pair(-dist[b],b));
            }
        }
    } 
}
int main(){
    cin >> N >> M;  
    for(ll i = 0;i < M;i++){
        ll a,b,w; cin >> a >> b >> w; 
        adj[a].push_back(make_pair(b,w));
    }
    djikstra(1);
    for(ll i = 1;i <= N;i++){
        cout << dist[i] << " ";
    }
    cout << endl;
}
